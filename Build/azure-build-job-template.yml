parameters:
  buildConfiguration: RelWithDebInfo
  name: ''
  vmImage: 'macOS-10.14'
  cmakeConfigArgs: '-G "Unix Makefiles" -DCMAKE_BUILD_TYPE=RelWithDebInfo'
  cmakeBuildArgs: ''
  ctestArgs: ''
  llvmBuildAssetName: MacOSX14_RelWithDebInfo
  llvmVersion: 9.x
  packageSuffix: ''
  cpackGenerators: ZIP

jobs:
  - job: ${{ parameters.name }}

    pool:
      vmImage: ${{ parameters.vmImage }}

    timeoutInMinutes: 120

    steps:

    # On Windows, patch NSIS to support >1024 character strings. Without this, the installer will
    # be unable to add WAVM to the PATH environment variable on many systems.
    - script: curl -v -L -o $(Pipeline.Workspace)/nsisPatch.zip "https://sourceforge.net/projects/nsis/files/NSIS 3/3.04/nsis-3.04-strlen_8192.zip/download"
      displayName: Download NSIS patch (Windows)
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
    - task: ExtractFiles@1
      displayName: Extract NSIS patch (Windows)
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
      inputs:
          archiveFilePatterns: $(Pipeline.Workspace)/nsisPatch.zip
          destinationFolder: "C:\\Program Files (x86)\\NSIS-patch"
    - task: CopyFiles@2
      displayName: Apply NSIS patch (Windows)
      condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
      inputs:
        sourceFolder: "C:\\Program Files (x86)\\NSIS-patch"
        targetFolder: "C:\\Program Files (x86)\\NSIS"
        overWrite: true


    # Extract the contents of the VERSION file to the job variable VERSION.
    - bash: Build/azure-read-version.sh
      displayName: Read WAVM version
      workingDirectory: $(Build.SourcesDirectory)

    # Download and extract the LLVM build from the pipeline for https://github.com/WAVM/WAVM-LLVM/
    - task: DownloadGitHubRelease@0
      displayName: Download LLVM Build
      inputs:
        connection: GitHubPAT
        userRepository: WAVM/WAVM-LLVM
        itemPattern: ${{ parameters.llvmBuildAssetName }}
        downloadPath: $(Pipeline.Workspace)
        defaultVersionType: specificTag
        version: ${{parameters.llvmVersion}}
    - task: ExtractFiles@1
      displayName: Extract LLVM Build
      inputs:
        archiveFilePatterns: $(Pipeline.Workspace)/${{ parameters.llvmBuildAssetName }}
        destinationFolder: $(Build.ArtifactStagingDirectory)/llvm
        cleanDestinationFolder: false

    # Configure and build WAVM
    - task: CMake@1
      displayName: Configure WAVM
      inputs:
        workingDirectory: '$(Build.ArtifactStagingDirectory)'
        cmakeArgs: >
          ${{ parameters.cmakeConfigArgs }}
          -DLLVM_DIR=$(Build.ArtifactStagingDirectory)/llvm/lib/cmake/llvm
          -DCPACK_GENERATOR="${{parameters.cpackGenerators}}"
          -DCPACK_PACKAGE_FILE_NAME=wavm-$(VERSION)${{parameters.packageSuffix}}
          $(Build.SourcesDirectory)

    - task: CMake@1
      displayName: Build WAVM
      inputs:
        workingDirectory: '$(Build.ArtifactStagingDirectory)'
        cmakeArgs: >
          --build .
          ${{ parameters.cmakeBuildArgs }}
          --parallel 2


    # Run the WAVM test suite
    - script: ctest -j4 ${{parameters.ctestArgs}} -V
      displayName: Run WAVM tests
      workingDirectory: $(Build.ArtifactStagingDirectory)

    # Create WAVM package(s)
    - task: CMake@1
      displayName: Package WAVM
      inputs:
        workingDirectory: '$(Build.ArtifactStagingDirectory)'
        cmakeArgs: >
          --build .
          --target package
          ${{ parameters.cmakeBuildArgs }}

    # Publish the package. The publish task does not accept wildcards, so we must first copy the
    # packages to a new directory and then publish that directory.
    - task: CopyFiles@2
      displayName: Isolate WAVM packages
      inputs:
        sourceFolder: $(Build.ArtifactStagingDirectory)
        contents: wavm-$(VERSION)${{parameters.packageSuffix}}.*
        targetFolder: $(Build.ArtifactStagingDirectory)/packages
    - publish: $(Build.ArtifactStagingDirectory)/packages
      displayName: Public WAVM packages
      artifact: ${{ parameters.name }}